
/**
 * Write a description of PerimeterAssignmentRunner here.
 * 
 * @Kaiqi 
 * @31/Dec/2022
 */
import edu.duke.*; 
import java.io.File;

public class PerimeterAssignmentRunner {
    public double getPerimeter (Shape s){
        double totalPerim = 0.0;
        Point prevPt = s.getLastPoint ();
        for (Point currPt: s.getPoints()){
            double currDist = prevPt.distance(currPt);
            totalPerim = totalPerim + currDist;
            prevPt = currPt;
        }
        return totalPerim;
    }
    
    public int getNumPoints(Shape s){
        int totalNumber = 0;
        for (Point p: s.getPoints()){
            totalNumber += 1;
        }
        return totalNumber;
    }
    
    public double getAverageLength(Shape s){
        return getPerimeter(s)/getNumPoints(s);
    }
    
    public double getLargestSide(Shape s){
        double largestSide = 0.0;
        double prevSd = 0.0;
        Point prevPt =  s.getLastPoint();
        for (Point currPt: s.getPoints()){
            double currSd = prevPt.distance(currPt);
            if (currSd > prevSd){
                largestSide = currSd;
            }
            else{
            largestSide = prevSd;
            } 
            prevSd = currSd;
        }
        return largestSide;
    }
    
    //Simpler code of getLargestSide Method
    public double getLargestSide2(Shape s){
        double largestSide = 0.0;
        Point prevPt = s.getLastPoint();
        for (Point currPt: s.getPoints()){
        double currDist = prevPt.distance(currPt);
        if(currDist > largestSide){
            largestSide = currDist;
        }
        prevPt = currPt;
        }
        return largestSide;
    }
    
    public double getLargestX(Shape s){
        double largestX = 0;
        for(Point p: s.getPoints()){
            if (p.getX() > largestX){
            largestX = p.getX();
            }
        }
        return largestX;
    }
    
    public double getLargestPerimeterMultipleFiles(){
        double largestPer = 0.0;
        DirectoryResource dir = new DirectoryResource ();
        for (File f: dir.selectedFiles()){
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            if (getPerimeter(s) > largestPer){
                largestPer = getPerimeter(s);
            }
        }
        return largestPer;
    }
    
    public String getFileWithLargestPerimeter(){
        File temp = null;
        double largestPer = 0.0;
        DirectoryResource dir = new DirectoryResource();
        for(File f: dir.selectedFiles()){
            FileResource fr = new FileResource(f);
            Shape s = new Shape(fr);
            if (getPerimeter(s) > largestPer){
                largestPer = getPerimeter(s);
                temp = f;
            }
        }
        return temp.getName();
    }
    
    public void testPerimeter(){
        FileResource fr = new FileResource();
        Shape s = new Shape(fr);
        double length = getPerimeter(s);
        int numPoint = getNumPoints(s);
        double avgLen = getAverageLength(s);
        double largestSide = getLargestSide(s);
        double largestX = getLargestX(s);
        System.out.println("perimeter= " + length);
        System.out.println("total Number of the Points = " + numPoint);
        System.out.println("average length = " + avgLen);
        System.out.println("largest side = " + largestSide);
        System.out.println("largest x = " + largestX);
    }
    
    public void testPerimeterMultipleFiles(){
        System.out.println(getLargestPerimeterMultipleFiles());
    }

    public void testFileWithLargestPerimeter(){
        System.out.println(getFileWithLargestPerimeter());
    }
    
    public static void main (String[] args){
        PerimeterAssignmentRunner pr = new PerimeterAssignmentRunner();
        pr.testPerimeterMultipleFiles();       
    }
}


